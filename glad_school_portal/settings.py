"""
Django settings for glad_school_portal project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ
import os

# Initialize environ
env = environ.Env(
    # Set casting and default values
    DEBUG=(bool, False),
    SECURE_SSL_REDIRECT=(bool, False),  # Disabled for development
    SESSION_COOKIE_SECURE=(bool, False),  # Disabled for development
    CSRF_COOKIE_SECURE=(bool, False),  # Disabled for development
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Take environment variables from .env file if it exists
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Get from environment variable or use default in development only
SECRET_KEY = env('SECRET_KEY', default='jxxvv1@krq2_op!z+2=@k@0aj_e_&(4$c@v_qm=4za9z+idk^b')

# SECURITY WARNING: don't run with debug turned on in production!
# Explicitly set to True for development
DEBUG = True

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['127.0.0.1', 'localhost', '.localhost', 'testserver', 'gladtidingsschool.example'])

# Security settings - controlled by environment variables
SECURE_SSL_REDIRECT = env('SECURE_SSL_REDIRECT')
SESSION_COOKIE_SECURE = env('SESSION_COOKIE_SECURE')
CSRF_COOKIE_SECURE = env('CSRF_COOKIE_SECURE')
SECURE_HSTS_SECONDS = env.int('SECURE_HSTS_SECONDS', default=0)  # Disabled for development
SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool('SECURE_HSTS_INCLUDE_SUBDOMAINS', default=False)
SECURE_HSTS_PRELOAD = env.bool('SECURE_HSTS_PRELOAD', default=False)
SECURE_BROWSER_XSS_FILTER = env.bool('SECURE_BROWSER_XSS_FILTER', default=True)
SECURE_CONTENT_TYPE_NOSNIFF = env.bool('SECURE_CONTENT_TYPE_NOSNIFF', default=True)
X_FRAME_OPTIONS = env('X_FRAME_OPTIONS', default='DENY')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'django_redis',  # Redis cache backend
    'csp',  # Content Security Policy
    'rest_framework',  # Django REST Framework
    'django_filters',  # Advanced filtering
    'corsheaders',  # CORS headers
    'django_extensions',  # Django extensions
    'import_export',  # Import/Export functionality
    # Project apps
    'core',  # Added core app
    'users',  # Added users app
    'students',  # Added students app
    'staff',  # Added staff app
    'accounting',  # Added accounting app
    'academics',  # Added academics app
    'itsupport',  # Added itsupport app
    'assignments',  # Added assignments app
    'cbt',  # Added cbt app
]

# Remove None values from INSTALLED_APPS
INSTALLED_APPS = [app for app in INSTALLED_APPS if app is not None]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware (should be first)
    'django.middleware.security.SecurityMiddleware',
    # Performance monitoring middleware
    'core.performance.PerformanceMonitoringMiddleware',
    'core.performance.DatabaseQueryMonitoringMiddleware',
    'core.performance.MemoryMonitoringMiddleware',
    'core.performance.RateLimitMiddleware',
    # Add UpdateCacheMiddleware at the beginning and FetchFromCacheMiddleware after CommonMiddleware
    'django.middleware.cache.UpdateCacheMiddleware' if not DEBUG else None,
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware' if not DEBUG else None,
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Content Security Policy
    'csp.middleware.CSPMiddleware',
    # Custom middleware
    'core.middleware.RequestLoggingMiddleware',
    'core.middleware.SecurityHeadersMiddleware',
    'core.middleware.UserActivityMiddleware',
]

# Remove None values from MIDDLEWARE
MIDDLEWARE = [middleware for middleware in MIDDLEWARE if middleware is not None]

# Remove any SSL redirect middleware in development
if DEBUG:
    MIDDLEWARE = [m for m in MIDDLEWARE if not m.endswith('RedirectMiddleware')]

ROOT_URLCONF = 'glad_school_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'core' / 'templates'],
        'APP_DIRS': False,  # Set to False when using custom loaders
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.debug',
            ],
            # Enable template caching in production
            'loaders': [
                # Use cached template loader in production for better performance
                ('django.template.loaders.cached.Loader', [
                    'django.template.loaders.filesystem.Loader',
                    'django.template.loaders.app_directories.Loader',
                ]) if not DEBUG else
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
            ],
        },
    },
]

WSGI_APPLICATION = 'glad_school_portal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Handle database URL parsing with special attention to timeout parameters
# to prevent the 'invalid dsn: invalid connection option "timeout"' error
import re
db_url = env.str('DATABASE_URL', default='sqlite:///db.sqlite3')

# If this is a PostgreSQL URL and contains 'timeout' parameter, replace with 'connect_timeout'
if ('postgres' in db_url.lower() or 'postgresql' in db_url.lower()) and 'timeout=' in db_url:
    # Replace timeout parameter with connect_timeout in PostgreSQL URLs
    db_url = re.sub(r'([?&])timeout=([0-9]+)', r'\1connect_timeout=\2', db_url)

# Parse the sanitized database URL
DATABASES = {
    'default': env.db_url('DATABASE_URL', default=db_url)
}

# Double-check that we don't have a 'timeout' parameter in PostgreSQL connections
# which would cause 'invalid dsn: invalid connection option "timeout"' errors
if DATABASES['default']['ENGINE'] == 'django.db.backends.postgresql':
    # Remove any timeout parameter that might still be in the connection options
    if 'OPTIONS' in DATABASES['default'] and 'timeout' in DATABASES['default']['OPTIONS']:
        del DATABASES['default']['OPTIONS']['timeout']

# Database performance optimizations
DATABASES['default']['CONN_MAX_AGE'] = env.int('DB_CONN_MAX_AGE', default=60) # Keep connections alive for 60 seconds

# Configure database-specific options
if DATABASES['default']['ENGINE'] == 'django.db.backends.postgresql':
    # Ensure OPTIONS exists
    if 'OPTIONS' not in DATABASES['default']:
        DATABASES['default']['OPTIONS'] = {}
    # Use connect_timeout for PostgreSQL (not timeout)
    DATABASES['default']['OPTIONS']['connect_timeout'] = 30
    # Additional PostgreSQL optimizations
    DATABASES['default']['OPTIONS'].update({
        'init_command': "SET timezone='UTC'",
        'charset': 'utf8',
    })
elif DATABASES['default']['ENGINE'] == 'django.db.backends.mysql':
    # Ensure OPTIONS exists
    if 'OPTIONS' not in DATABASES['default']:
        DATABASES['default']['OPTIONS'] = {}
    # MySQL optimizations
    DATABASES['default']['OPTIONS'].update({
        'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        'charset': 'utf8mb4',
        'autocommit': True,
    })
elif DATABASES['default']['ENGINE'] == 'django.db.backends.sqlite3':
    # Ensure OPTIONS exists
    if 'OPTIONS' not in DATABASES['default']:
        DATABASES['default']['OPTIONS'] = {}
    # Use timeout for SQLite
    DATABASES['default']['OPTIONS']['timeout'] = 30
    # SQLite optimizations
    DATABASES['default']['OPTIONS'].update({
        'init_command': "PRAGMA foreign_keys=ON; PRAGMA journal_mode=WAL;",
    })

# Use persistent connections in production
if not DEBUG:
    DATABASES['default']['CONN_MAX_AGE'] = 600  # 10 minutes


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.CustomUser'

# Authentication settings
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'landing_page'
LOGIN_URL = 'login'

# Base URL for generating absolute URLs in emails
BASE_URL = 'http://gladtidingsschool.example'  # Change this in production

# Email settings - use environment variables in production
# Select email backend based on DEBUG setting
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' if DEBUG else 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env('EMAIL_HOST', default='smtp.your-email-provider.com')
EMAIL_PORT = env.int('EMAIL_PORT', default=587)
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS', default=True)
EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default='Glad Tidings School <noreply@gladtidingsschool.example>')
SCHOOL_SUPPORT_EMAIL = env('SCHOOL_SUPPORT_EMAIL', default='support@gladtidingsschool.example')

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'  # For production collectstatic
STATICFILES_DIRS = [
    BASE_DIR / 'static',  # Global static files directory
]

# Media files (user uploads)
MEDIA_URL = 'media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'json': {
            'format': '{"level": "%(levelname)s", "time": "%(asctime)s", "module": "%(module)s", "message": "%(message)s"}',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'filters': ['require_debug_true'],
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'django_errors.log',
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'security.log',
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 10,
            'formatter': 'json',
        },
        'request_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'requests.log',
            'maxBytes': 1024*1024*10,  # 10 MB
            'backupCount': 7,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['error_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['security_file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'glad_tidings.requests': {
            'handlers': ['request_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'core': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'accounting': {
            'handlers': ['file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'students': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
        'staff': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'WARNING',
    },
}

# Create logs directory if it doesn't exist
import os
os.makedirs(BASE_DIR / 'logs', exist_ok=True)

# Cache settings
# Use Redis in production, local memory cache in development
if not DEBUG:
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': env('REDIS_URL', default='redis://127.0.0.1:6379/1'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }
    # Cache session if Redis is available
    SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
    SESSION_CACHE_ALIAS = 'default'
else:
    # Use local memory cache in development
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        }
    }

# Cache timeout settings
CACHE_MIDDLEWARE_SECONDS = 60 * 15  # 15 minutes
CACHE_MIDDLEWARE_KEY_PREFIX = 'glad_tidings'

# Content Security Policy (updated for django-csp 4.0+)
# https://django-csp.readthedocs.io/en/latest/migration-guide.html
if not DEBUG:
    # Strict CSP in production
    CONTENT_SECURITY_POLICY = {
        'DIRECTIVES': {
            'default-src': ("'self'",),
            'style-src': ("'self'", "'unsafe-inline'"),  # Allow inline styles
            'script-src': ("'self'",),  # Only allow scripts from same origin
            'font-src': ("'self'", "data:"),  # Allow fonts from data URIs
            'img-src': ("'self'", "data:"),  # Allow images from data URIs
            'connect-src': ("'self'",),  # Only allow connections to same origin
        }
    }
else:
    # Very relaxed CSP in development to avoid any blocking issues
    CONTENT_SECURITY_POLICY = {
        'DIRECTIVES': {
            'default-src': ("'self'", "'unsafe-inline'", "'unsafe-eval'", "data:", "http:", "https:"),
            'img-src': ("'self'", "data:", "http:", "https:"),
            'style-src': ("'self'", "'unsafe-inline'", "http:", "https:"),
            'script-src': ("'self'", "'unsafe-inline'", "'unsafe-eval'", "http:", "https:"),
            'connect-src': ("'self'", "http:", "https:"),
        }
    }

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer' if DEBUG else None,
    ],
}

# Remove None values from REST_FRAMEWORK renderers
if 'DEFAULT_RENDERER_CLASSES' in REST_FRAMEWORK:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] = [
        renderer for renderer in REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] if renderer is not None
    ]

# CORS settings (for API access)
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
else:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",  # React development server
        "http://127.0.0.1:3000",
        # Add your production frontend URLs here
    ]

CORS_ALLOW_CREDENTIALS = True

# Debug Toolbar settings (development only)
if DEBUG:
    INTERNAL_IPS = [
        '127.0.0.1',
        'localhost',
    ]

# Performance monitoring settings
SLOW_REQUEST_THRESHOLD = env.float('SLOW_REQUEST_THRESHOLD', default=2.0)  # seconds
SLOW_QUERY_THRESHOLD = env.float('SLOW_QUERY_THRESHOLD', default=0.5)  # seconds

# Rate limiting settings
RATE_LIMIT_REQUESTS = env.int('RATE_LIMIT_REQUESTS', default=100)  # requests per window
RATE_LIMIT_WINDOW = env.int('RATE_LIMIT_WINDOW', default=60)  # seconds
