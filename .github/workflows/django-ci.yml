name: Django CI/CD Pipeline

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest pytest-django coverage
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run Tests with Coverage
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        DJANGO_SETTINGS_MODULE: glad_school_portal.settings
        SECRET_KEY: testsecretkey
      run: |
        coverage run --source='.' manage.py test
        coverage report
        
    - name: Upload coverage report artifact
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/
  
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'
          
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Collect Static Files
        env:
          DJANGO_SETTINGS_MODULE: glad_school_portal.settings
          SECRET_KEY: buildsecretkey
          DEBUG: "False"
        run: |
          python manage.py collectstatic --no-input
          
      - name: Check for migration issues
        env:
          DJANGO_SETTINGS_MODULE: glad_school_portal.settings
          SECRET_KEY: buildsecretkey
        run: |
          python manage.py makemigrations --check --dry-run
          
      - name: Bundle application
        run: |
          mkdir -p deployment
          tar -czvf deployment/app.tar.gz .
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-bundle
          path: deployment/

  # Example deployment job (commented out - activate when ready)
  # deploy:
  #   needs: build
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download built app
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: app-bundle
  #         path: ./
  #         
  #     - name: Deploy to production
  #       run: |
  #         # Add deployment steps here - e.g., deploy to Heroku, AWS, etc.
  #       env:
  #         DEPLOYMENT_TOKEN: ${{ secrets.DEPLOYMENT_TOKEN }}
