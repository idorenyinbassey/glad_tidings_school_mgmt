name: Glad Tidings School Management - CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Security Analysis
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety flake8 black isort mypy django-stubs
        
    - name: Run Black (Code Formatting)
      run: black --check --diff . --exclude="migrations|venv|env"
      
    - name: Run isort (Import Sorting)
      run: isort --check-only --diff . --skip-glob="*/migrations/*"
      
    - name: Run Flake8 (Code Style)
      run: flake8 . --exclude=migrations,venv,env --max-line-length=88 --ignore=E203,W503
      
    - name: Run Bandit (Security Analysis)
      run: bandit -r . -x "/venv/,/env/,*/migrations/*,*/tests/*" -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Run Safety (Dependency Vulnerability Check)
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # Unit Tests with Multiple Python Versions
  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_glad_school
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-xdist
        
    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
        echo "DEBUG=False" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_glad_school" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        
    - name: Run migrations
      run: python manage.py migrate --settings=glad_school_portal.test_settings
      
    - name: Check for missing migrations
      run: python manage.py makemigrations --check --dry-run --settings=glad_school_portal.test_settings
      
    - name: Run Django system checks
      run: python manage.py check --settings=glad_school_portal.test_settings
      
    - name: Run tests with coverage
      run: |
        python -m pytest \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=75 \
          --durations=10 \
          --tb=short \
          -n auto \
          -v
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: matrix.python-version == '3.11'
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
        retention-days: 30

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Django security checks
      run: python manage.py check --deploy --settings=glad_school_portal.test_settings
      
    - name: Run custom security audit
      run: python manage.py security_audit --json --settings=glad_school_portal.test_settings > security-audit.json
      continue-on-error: true
      
    - name: Upload security audit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-audit-report
        path: security-audit.json
        retention-days: 30

  # Database Migration Tests
  migration-test:
    name: Migration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_glad_school_migrations
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-migrations" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_glad_school_migrations" >> $GITHUB_ENV
        
    - name: Test forward migrations
      run: python manage.py migrate --settings=glad_school_portal.test_settings
      
    - name: Test migration rollbacks
      run: |
        # Get list of migrations and test rollback for each app
        python manage.py showmigrations --settings=glad_school_portal.test_settings
        
        # Test rollback for core app (if it has migrations)
        python manage.py migrate core zero --settings=glad_school_portal.test_settings || true
        python manage.py migrate --settings=glad_school_portal.test_settings

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_glad_school_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-performance" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_glad_school_perf" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        
    - name: Run migrations
      run: python manage.py migrate --settings=glad_school_portal.test_settings
      
    - name: Test system health
      run: python manage.py system_health --settings=glad_school_portal.test_settings
      
    - name: Run performance monitoring test
      run: python manage.py performance_report --hours=1 --json --settings=glad_school_portal.test_settings > performance-report.json
      
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.json
        retention-days: 30

  # Build and Test Docker Image
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test, security-audit]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create Dockerfile for testing
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.11-slim
        
        # Set environment variables
        ENV PYTHONDONTWRITEBYTECODE=1
        ENV PYTHONUNBUFFERED=1
        ENV DJANGO_SETTINGS_MODULE=glad_school_portal.settings_production
        
        # Set work directory
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update \
            && apt-get install -y --no-install-recommends \
                postgresql-client \
                gcc \
                python3-dev \
                libpq-dev \
            && rm -rf /var/lib/apt/lists/*
        
        # Install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Copy project
        COPY . .
        
        # Create non-root user
        RUN adduser --disabled-password --gecos '' appuser && \
            chown -R appuser:appuser /app
        USER appuser
        
        # Collect static files
        RUN python manage.py collectstatic --noinput --settings=glad_school_portal.test_settings || true
        
        EXPOSE 8000
        
        CMD ["gunicorn", "--bind", "0.0.0.0:8000", "glad_school_portal.wsgi:application"]
        EOF
        
    - name: Build Docker image
      run: |
        docker build -t glad-school:test .
        
    - name: Test Docker image
      run: |
        # Run basic container test
        docker run --rm glad-school:test python manage.py check --settings=glad_school_portal.test_settings

  # Deployment Readiness Check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [test, security-audit, migration-test, performance-test, docker-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run deployment checks
      run: |
        echo "Running deployment readiness checks..."
        python manage.py check --deploy --settings=glad_school_portal.settings_production || true
        
    - name: Create deployment summary
      run: |
        cat > deployment-summary.md << 'EOF'
        # Deployment Readiness Summary
        
        ✅ **All CI/CD checks passed!**
        
        ## Completed Checks
        - ✅ Code Quality & Security Analysis
        - ✅ Unit Tests (Python 3.9, 3.10, 3.11)
        - ✅ Security Audit
        - ✅ Migration Tests
        - ✅ Performance Tests
        - ✅ Docker Build Test
        
        ## Next Steps
        1. Review any security warnings in the reports
        2. Deploy to staging environment
        3. Run final integration tests
        4. Deploy to production
        
        Generated on: $(date)
        Commit: ${{ github.sha }}
        EOF
        
    - name: Upload deployment summary
      uses: actions/upload-artifact@v3
      with:
        name: deployment-summary
        path: deployment-summary.md
        retention-days: 90

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deployment-check]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deployment-check.result == 'success'
      run: |
        echo "🎉 All CI/CD checks passed! Ready for deployment."
        
    - name: Notify Failure
      if: needs.deployment-check.result == 'failure' || needs.deployment-check.result == 'cancelled'
      run: |
        echo "❌ CI/CD checks failed. Please review the logs."
        exit 1
